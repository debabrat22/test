Method m = MyClass.class.getDeclaredMethod("myMethod", Integer.TYPE);
m.setAccessible(true); //if security settings allow this
Object o = m.invoke(null, 23); //use null if the method is static


public static void main(String args[]) throws Exception, SecurityException {
		Method m = Test.class.getDeclaredMethod("method1", Object.class);
		m.setAccessible(true);
		String str = (String) m.invoke(null, "debabrata");
		
public void a1() throws Exception, SecurityException {
		Method m = Test.class.getDeclaredMethod("method1", String.class, java.util.List.class);
		m.setAccessible(true);
		List<String> list1 = null;
		String str = (String) m.invoke(null, "debabrata nayak", list1);
	}
	

public void a1() throws Exception, SecurityException {
		Method m = Test.class.getDeclaredMethod("method1", String.class, java.util.List[].class);
		m.setAccessible(true);
		List<String>[] list1 = null;
		String str = (String) m.invoke(null, "debabrata nayak", list1);
	}

========================================================================================================================
//argument type - Map<User, String>

in this case-

Class[] argTypes = new Class[] { String[].class };
        Method main = c.getDeclaredMethod("main", argTypes);
        String[] mainArgs = Arrays.copyOfRange(args, 1, args.length);
        System.out.format("invoking %s.main()%n", c.getName());
        main.invoke(null, (Object)mainArgs);
	
	
Test1 test = new Test1();
		Method m = test.getClass().getDeclaredMethod("method1", String.class, java.util.List[].class);
		m.setAccessible(true);
		List<String>[] list1 = null;
		String str = (String) m.invoke(test, "debabrata nayak", list1);
	
==================================================
	
	Optional Demo
	
	public static void optionalDemo( ) {
		
		Function<String, String> getSecondWord = (String s) -> 
					{
						return s.split(" ").length>1 ? s.split(" ")[1] : null;};
			
					}
		Function<String, Integer> getLetterCount = t -> t.length();
		Integer count = getSecondWord.andThen(getLetterCount).apply("nayak");
		System.out.println(count);
		
//will throw NullPointerException

//to prevent this

Optional<String> o = Optional<T>.ofNullable(getSecondWord.apply("nayak"));
System.out.println(o.isPresent());

//will not throw any exception, here if the object is present then object would be returned else empty Optional object would be returned,
but no NullPoionterException would be thrown.

================================================================
sonar
================================================================
Use @SuppressWarnings(‘cs.RULENAME’) for a specific rule name.

@SuppressWarnings(‘sf:RULENAME’) is also allowed.

Use @SuppressWarnings(‘cs.RULENAME, cs.OTHERULE’) to specify multiple rules, separating each new rule with a comma.

Use @SuppressWarnings(‘all’) to ignore all rules.

For suppressing multiple warnings you can do it like this @SuppressWarnings({"squid:S2078", "squid:S2076"})

================================================
mockito
================================================

when(listMock.size()).thenReturn(2).thenReturn(3)
assertEquals(2, listMock.size())
assertEquals(3, listMock.size())

====
public boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		}
		return true;
	}
	
MathUtils mockMathUtils = mock(MathUtils.class);
	when(mockMathUtils.add(1, 1)).thenReturn(2);
	when(mockMathUtils.isInteger(anyString())).thenReturn(true);
	
assertEquals(2, mockMathUtils.add(1, 1));
	assertTrue(mockMathUtils.isInteger("1"));
	assertTrue(mockMathUtils.isInteger("999"));



======

